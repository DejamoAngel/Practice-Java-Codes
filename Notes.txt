1/1/24
User Input in Java
You can use the Scanner class from the java.util package.
First, import the Scanner class at the beginning of your Java program:
	import java.util.Scanner;

Next, create an instance of the Scanner class and assign it to a variable. You can name this variable anything you like. Here's an example:
	Scanner scanner = new Scanner(System.in);

Now that you have a Scanner object, you can use it to read user input. 
For example, if you want to read an:
Integer entered by the user, you can use the following code: 
	System.out.println("Please enter an integer: ");
	int userInput = scanner.nextInt();
String entered by the user, you can use the following code: 
	System.out.println("Please enter an string: ");
	String userInput = scanner.nextLine();
Float entered by the user, you can use the following code: 
	System.out.println("Please enter an float: ");
	float userInput = scanner.nextFloat();
Double entered by the user, you can use the following code: 
	System.out.println("Please enter an double: ");
	double userInput = scanner.nextDouble();
In this code, the System.out.println() method is used to print a message to the console, prompting the user to enter a string. 
Then, the nextLine() method of the Scanner object is used to read the string entered by the user.

Remember to close the Scanner object once you have finished using it to prevent resource leaks. Here's an example: 
scanner.close();
	- The scanner.close() method is used to close the Scanner object after it has been used. 
	  Closing a Scanner object will free up resources and ensure that the program doesn't accidentally consume additional system resources 
          while the scanner remains open. It's important to close the Scanner object when you're done using it, especially when dealing with 
	  external resources like files or keyboard input. Failing to close the Scanner object can result in a memory leak, which is when the program 
	  consumes more memory than it needs, causing performance issues.

import java.util.Scanner;

public class ArithmeticOperationsSimple {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        System.out.printf("Enter The First Number: ");
        int num1 = scanner.nextInt();

        System.out.printf("Enter The Second Number: ");
        int num2 = scanner.nextInt();

        int sum = num1 + num2;
        int subtract = num1 - num2;
        int multiply = num1 * num2;
        double division = num1 / num2;

        System.out.println("Output:");
        System.out.println("Sum: " + sum );
        System.out.println("Subtract: " + subtract );
        System.out.println("Multiplication: " + multiply );
        System.out.println("Division: " + division );

        scanner.close();

    }
}


import java.util.Scanner;

public class ArithmeticOperations {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the first number:");
        int num1 = scanner.nextInt();

        System.out.println("Enter the second number:");
        int num2 = scanner.nextInt();

        int sum = addNumbers(num1, num2);
        int difference = subtractNumbers(num1, num2);
        int product = multiplyNumbers(num1, num2);
        double quotient = divideNumbers(num1, num2);

        System.out.println("The sum of " + num1 + " and " + num2 + " is: " + sum);
        System.out.println("The difference of " + num1 + " and " + num2 + " is: " + difference);
        System.out.println("The product of " + num1 + " and " + num2 + " is: " + product);
        System.out.println("The quotient of " + num1 + " and " + num2 + " is: " + quotient);
    }

    public static int addNumbers(int num1, int num2) {
        return num1 + num2;
    }

    public static int subtractNumbers(int num1, int num2) {
        return num1 - num2;
    }

    public static int multiplyNumbers(int num1, int num2) {
        return num1 * num2;
    }

    public static double divideNumbers(int num1, int num2) {
        if (num2 == 0) {
            System.out.println("Error: Division by zero is not allowed!");
            return 0;
        } else {
            return (double) num1 / num2;
        }
    }
}



In this code, we have created a class called ArithmeticOperations and a main method inside it. 
We use the Scanner class to read the input from the user. 
The addNumbers, subtractNumbers, multiplyNumbers, and divideNumbers methods perform the respective arithmetic operations.

The main method calls these methods and prints the results to the console.

Note that in the divideNumbers method, we have added a check to prevent division by zero, which would cause an error.


Methods in Java
In Java, a method is a block of code that is called by its name. The code within the method is executed when the method is invoked from elsewhere in the program.

Methods in Java can be used to perform specific tasks or to implement specific functionalities. They can take parameters and can return a value.

There are three types of methods in Java:

Instance Methods: These methods belong to an instance of a class and can access instance variables. They can be invoked on an object.

Static Methods: These methods belong to a class and not to an instance. They can access static variables. They can be invoked directly on the class and not on an object.

Constructor Methods: These methods are special instance methods that are used to initialize an object immediately after memory has been allocated for it. They have the same name as the class.

Methods are used to increase code reusability, maintainability, and efficiency in Java. They also serve as a way to define abstractions, encapsulation, and to provide inheritance capabilities in the Java language.


what does it mean by returning a value?
In programming, returning a value is an action that a function takes to send back some result or data to the part of the program that called it.
